R.version
install.packages("tidyverse")
install.packages("jsonlite")
load("C:/Users/tmril/OneDrive/Desktop/Data Analytics/Modules/Module 15 - R/1/Activities/01_Ins_RBasics/Solved/.RData")
load("C:/Users/tmril/OneDrive/Desktop/Data Analytics/Modules/Module 15 - R/1/Activities/01_Ins_RBasics/Solved/.RData")
random_list$coins
# Operate over an entire vector en masse
numeric_vector <- 1:length(combined_vector)
students <- c("Andrew","Matt","Alex","Marty","Samantha","John")
roll_call <- function(class){
print(Sys.Date())
# Create a for loop
for (x in students) {
print(x)
}
}
# Call the function with the student vector as an argument.
roll_call(students)
locker_combinations <- function(class){
# Create the for loop and print the student name and locker combination.
print(Sys.Date())
for (x in students) {
print(x," -- Locker Combo: ",sample(33,3)
}
locker_combinations <- function(class){
# Create the for loop and print the student name and locker combination.
print(Sys.Date())
for (x in students) {
print(x," -- Locker Combo: ",sample(33,3))
}
}
# Call the function with the student vector as an argument.
locker_combinations(students)
locker_combinations <- function(class){
# Create the for loop and print the student name and locker combination.
print(Sys.Date())
for (x in students) {
print(x," -- Locker Combo: ",'sample(33,3)')
}
}
# Call the function with the student vector as an argument.
locker_combinations(students)
locker_combinations <- function(class){
# Create the for loop and print the student name and locker combination.
print(Sys.Date())
for (x in students) {
print(x)
print(`sample(33,3`)
}
}
# Call the function with the student vector as an argument.
locker_combinations(students)
locker_combinations <- function(class){
# Create the for loop and print the student name and locker combination.
print(Sys.Date())
for (x in students) {
print(x)
print(`sample(33,3)`)
}
}
# Call the function with the student vector as an argument.
locker_combinations(students)
sample(33,3)
print(sample(33,3))
locker_combinations <- function(class){
# Create the for loop and print the student name and locker combination.
print(Sys.Date())
for (x in students) {
print(x)
print(sample(33,3))
}
}
# Call the function with the student vector as an argument.
locker_combinations(students)
locker_combinations <- function(class){
# Create the for loop and print the student name and locker combination.
print(Sys.Date())
for (x in students) {
print(x," -- Locker Combo: ",sample(33,3))
}
}
# Call the function with the student vector as an argument.
locker_combinations(students)
locker_combinations <- function(class){
# Create the for loop and print the student name and locker combination.
print(Sys.Date())
for (x in students) {
print(x" -- Locker Combo: "sample(33,3))
locker_combinations <- function(class){
# Create the for loop and print the student name and locker combination.
print(Sys.Date())
for (x in students) {
print(x, " -- Locker Combo: ", sample(33,3))
}
}
# Call the function with the student vector as an argument.
locker_combinations(students)
locker_combinations <- function(class){
# Create the for loop and print the student name and locker combination.
print(Sys.Date())
for (x in students) {
print(x, " -- Locker Combo: ")
}
}
# Call the function with the student vector as an argument.
locker_combinations(students)
locker_combinations <- function(class){
# Create the for loop and print the student name and locker combination.
print(Sys.Date())
for (x in students) {
print(x, sample(33,3))
}
}
# Call the function with the student vector as an argument.
locker_combinations(students)
locker_combinations <- function(class){
# Create the for loop and print the student name and locker combination.
print(Sys.Date())
for (x in students) {
paste(x," -- Locker Combo: ", sample(33,3))
}
}
# Call the function with the student vector as an argument.
locker_combinations(students)
locker_combinations <- function(class){
# Create the for loop and print the student name and locker combination.
print(Sys.Date())
for (x in students) {
print(x)
print(sample(33,3))
}
}
# Call the function with the student vector as an argument.
locker_combinations(students)
locker_combinations <- function(class){
# Create the for loop and print the student name and locker combination.
print(Sys.Date())
for (x in students) {
print(x)
print(sample(33,3))
}
}
# Call the function with the student vector as an argument.
locker_combinations(students)
students <- c("Andrew","Matt","Alex","Marty","Ben","Frank")
roll_call <- function(class){
print(Sys.Date())
# Create a for loop
for (x in students) {
print(x)
}
}
# Call the function with the student vector as an argument.
roll_call(students)
locker_combinations <- function(class){
# Create the for loop and print the student name and locker combination.
print(Sys.Date())
for (x in students) {
print(x)
print(sample(33,3))
}
}
# Call the function with the student vector as an argument.
locker_combinations(students)
for (student in students){
# Create a variable (substring)  that holds the second letter for each student.
second_letter <-(substring(student, 2, 2))
new_combo <-  sample(33:66,3)
# Create an if statement to find the names of students where the
# second letter that is an "e".
if (second_letter == "e") {
print(student)
print(new_combo)
next
}
else()
for (student in students){
# Create a variable (substring)  that holds the second letter for each student.
second_letter <-(substring(student, 2, 2))
new_combo <-  sample(33:66,3)
# Create an if statement to find the names of students where the
# second letter that is an "e".
if (second_letter == "e") {
print(student)
print(new_combo)
next
}
else{}
}
library(dplyr)
# Simple vectors
# Months of the year
months <- c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec")
# Average rainfall/precipitation in NYC during each month
precipitation <- c(3.9, 2.9, 4.1, 3.9, 4.5, 3.5, 4.5, 4.1, 4.0, 3.4, 3.8, 3.6)
print(months)
print(precipitation)
names(precipitation) <- months
# Display precipitation
print(precipitation)
print(names(precipitation))
mar_precipitation <- precipitation["Mar"]
print(mar_precipitation)
summary(precipitation)
precipitation_summary <- summary(precipitation)
precipitation_summary["Min."]
precipitation_summary["Mean"]
precipitation %>% summary()
precipitation_summary[["Max."]]
sd(precipitation)
stdev <- sd(precipitation)
round(stdev, 2)
precipitation %>% sd()
3.141592653 %>% round(2)
length(precipitation)
yearly_precipitation <- sum(precipitation)
yearly_precipitation
knitr::opts_chunk$set(echo = TRUE)
head(mpg)
library(tidyverse)
head(mpg)
plt <- ggplot(mpg,aes(x=class))
plt + geom_bar()
plt + geom_col()
plt + geom_bar()
View(plt)
mpg_summary <- mpg %>% group_by(manufacturer) %>% summarize(Vehicle_Count=n(), .groups = 'keep')
View(mpg_summary)
plt <- ggplot(mpg_summary,aes(x=manufacturer, y=Vehicle_Count))
plt + geom_col()
plt + geom_col() + xlab("Manufacturer") + ylab("Number of Vehicles")
plt + geom_col() + xlab("Manufacturer") + ylab("Number of Vehicles") +
theme(axis.text.x=element_text(angle=45,hjust=1))
mpg_summary <- subset(mpg,manufacturer=="toyota") %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep')
plt <- ggplot(mpg_summary, aes(x=cyl,y=Mean_Hwy))
View(mpg_summary)
View(plt)
mpg_summary <- subset(mpg,manufacturer=="toyota") %>% group_by(cyl) %>%
summarize(Mean_Hwy=mean(hwy), .groups = 'keep')
plt <- ggplot(mpg_summary, aes(x=cyl,y=Mean_Hwy))
View(mpg_summary)
plt + geom_line()
plt + geom_line() + scale_x_discrete(limits=c(4,6,8)) + scale_y_continuous(breaks = c(15:30))
plt <- ggplot(mpg,aes(x=displ,y=cty))
plt + geom_point() + xlab("Engine Size (L)") + ylab("City MPG")
plt + geom_point() + labs(x="Engine Size (L)", y="City MPG", color="Vehicle_Class")
plt + geom_point() + labs(x="Engine Size (L)",y="City MPG",color="Vehicle_Class")
plt + geom_point() + labs(x="Engine Size (L)",y="City MPG",color="Vehicle Class")
View(plt)
plt + geom_point() + labs(x="Engine Size (L)",y="City MPG",color="class")
plt <- ggplot(mpg,aes(x=displ,y=cty,color=class))
plt + geom_point() + labs(x="Engine Size (L)",y="City MPG",color="class")
plt <- ggplot(mpg,aes(x=displ,y=cty,color=class,shape=drv))
plt + geom_point() + labs(x="Engine Size (L)",y="City MPG",color="class",shape="Drivetrain")
plt <- ggplot(mpg,aes(x=displ,y=cty,color=class,shape=drv,size=cty))
plt + geom_point() + labs(x="Engine Size (L)",y="City MPG",color="class",shape="Drivetrain")
plt <- ggplot(mpg,aes(x=displ,y=cty,color=class,shape=drv,size=cty))
plt + geom_point() + labs(x="Engine Size (L)",y="City MPG",color="class",shape="Drivetrain",size="City MPG")
plt <- ggplot(mpg,aes(y=hwy))
plt + geom_boxplot()
plt <- ggplot(mpg,aes(x=manufacturer,y=hwy))
plt + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1))
plt + geom_boxplot(outlier.color="red", outlier.shape=1) +
theme(axis.text.x=element_text(angle=45,hjust=1))
plt + geom_boxplot(outlier.color="red", outlier.shape=1, aes(color=hwy)) +
theme(axis.text.x=element_text(angle=45,hjust=1))
plt + geom_boxplot(aes(color=hwy)) +
theme(axis.text.x=element_text(angle=45,hjust=1))
plt + geom_boxplot(aes(color=drv)) +
theme(axis.text.x=element_text(angle=45,hjust=1))
plt + geom_boxplot(aes(color=drv), outlier.color="red", outlier.shape=1, ) +
theme(axis.text.x=element_text(angle=45,hjust=1))
plt + geom_boxplot(aes(color=drv), outlier.color="red", outlier.shape=1) +
theme(axis.text.x=element_text(angle=45,hjust=1))
plt + geom_boxplot() +
theme(axis.text.x=element_text(angle=45,hjust=1))
plt + geom_boxplot(aes(color=drv), outlier.color="red", outlier.shape=1) +
theme(axis.text.x=element_text(angle=45,hjust=1))
plt + geom_boxplot(aes(color=trans), outlier.color="red", outlier.shape=1) +
theme(axis.text.x=element_text(angle=45,hjust=1))
plt + geom_boxplot(aes(color=class), outlier.color="red", outlier.shape=1) +
theme(axis.text.x=element_text(angle=45,hjust=1))
plt + geom_boxplot(aes(color=drv), outlier.color="red", outlier.shape=1) +
theme(axis.text.x=element_text(angle=45,hjust=1))
mpg_summary <- mpg %>% group_by(class,year) %>% summarize(Mean_Hwy=mean(hwy), .groups='keep')
plt <- ggplot(mpg_summary, aes(x=class,y=factor(year),fill=Mean_Hwy))
View(mpg_summary)
plt <- geom_tile() + labs(x="Vehicle Class",y="Vehicle Year",fill="Mean Hwy MPG")
mpg_summary <- mpg %>% group_by(class,year) %>% summarize(Mean_Hwy=mean(hwy), .groups='keep')
plt <- ggplot(mpg_summary, aes(x=class,y=factor(year),fill=Mean_Hwy))
plt + geom_tile() + labs(x="Vehicle Class",y="Vehicle Year",fill="Mean Hwy MPG")
?factor()
mpg_summary <- mpg %>% group_by(model,year) %>% summarize(Mean_Hwy=mean(hwy), .groups='keep')
plt <- ggplot(mpg_summary, aes(x=model, y=factor(year), fill=Mean_Hwy))
plt + geom_tile() + labs(x="Model",y="Vehicle Year",fill="Mean Hwy MPG") +
theme(axis.text.x = element_text(angle=45,hjust=1,vjust=.5))
plt + geom_tile() + labs(x="Model",y="Vehicle Year",fill="Mean Hwy MPG") +
theme(axis.text.x = element_text(angle=45,hjust=1))
plt <- ggplot(mpg,aes(x=manufacturer,y=hwy))
plt + geom_boxplot() +
theme(axis.text.x=element_text(angle=45,hjust=1)) +
geom_point()
mpg_summary <- mpg %>% group_by(class) %>% summarize(Mean_Engine=mean(displ), .groups = 'keep')
plt <- ggplot(mpg_summary,aes(x=class,y=Mean_Engine))
plt + geom_point(size=4) + labs(x="Vehicle Class",y="Mean Engine Size")
mpg_summary <- mpg %>% group_by(class) %>% summarize(Mean_Engine=mean(displ),SD_Engine=sd(displ), .groups = 'keep')
plt <- ggplot(mpg_summary,aes(x=class,y=Mean_Engine))
plt + geom_point(size=4) + labs(x="Vehicle Class",y="Mean Engine Size") +
geom_errorbar(aes(ymin=Mean_Engine-SD_Engine,ymax=Mean_Engine+SD_Engine))
mpg_long <- mpg %>% gather(key="MPG_Type",value="Rating",C(cty,hwy))
mpg_long <- mpg %>% gather(key="MPG_Type",value="Rating",c(cty,hwy))
head(mpg)
head(mpg_long)
plt <- ggplot(mpg_long,aes(x=manufacturer,y=Rating,color=MPG_Type))
plt + geom_boxplot() + theme(axis.text.x=element+text(angle=45,hjust=1))
plt <- ggplot(mpg_long,aes(x=manufacturer,y=Rating,color=MPG_Type))
plt + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1))
plt <- ggplot(mpg_long,aes(x=manufacturer,y=Rating,color=MPG_Type))
plt + geom_boxplot() + facet_wrap(vars(MPG_Type)) +
theme(axis.text.x=element_text(angle=45,hjust=1),legend.position="none") +
xlab("Manufacturer")
library(tidyverse)
lm(qsec ~ hp,mtcars)
summary(lm(qsec~hp,mtcars))
plt <- ggplot(mtcars(aes,x=hp,y=qsec))
plt <- ggplot(mtcars,aes(x=hp,y=qsec))
plt + geom_point() + geom_line(aes(y=yvals), color = "red")
plt <- ggplot(mtcars,aes(x=hp,y=qsec))
plt + geom_point() + geom_line(aes(y=yvals), color = "red")
model <- lm(qsec ~hp,mtcars)
yvals <- model$coefficients['hp']*mtcars$hp +
model$coefficients['(Intercept)']
plt <- ggplot(mtcars,aes(x=hp,y=qsec))
plt + geom_point() + geom_line(aes(y=yvals), color = "red")
lm(qsec ~ mpg + disp + drat + wt + hp, data=mtcars)
summary(lm(qsec ~ mpg + disp + drat + wt + hp, data=mtcars))
# Create a contingency (frequency) table for a chi-squared test.
table(mpg$class,mpg$year)
tbl <- table(mpg$class,mpg$year)
chisq.test(tbl)
library(dplyr)
MC_mpg <- read.csv(file='MechaCar_mpg.csv' ,check.names=F,stringsAsFactors = F)
setwd("C:/Users/tmril/OneDrive/Desktop/Data Analytics/Modules/Module 15 - R/Classwork/MechaCar_Statistical_Analysis")
MC_mpg <- read.csv(file='MechaCar_mpg.csv' ,check.names=F,stringsAsFactors = F)
View(MC_mpg)
lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD)
lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, data=MC_mpg)
lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, data=MC_mpg)
mpg_MLC <- lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, data=MC_mpg)
summary(mpg_MLC)
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, data=MC_mpg)
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, data=MC_mpg))
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, data=MC_mpg))
summary(mpg_MLC)
sus_coil <- read.csv(file='Suspension_Coil.csv',check.namees=F,stringsAsFactors=F)
sus_coil <- read.csv(file='Suspension_Coil.csv', check.namees=F,stringsAsFactors=F)
sus_coil <- read.csv(file='Suspension_Coil.csv' ,check.namees=F,stringsAsFactors=F)
sus_coil <- read.csv(file='Suspension_Coil.csv' ,check.names=F,stringsAsFactors=F)
View(sus_coil)
total_summary <- summarize(sus_coil$PSI)
